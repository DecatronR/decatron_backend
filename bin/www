#!/usr/bin/env node

/**
 * Module dependencies.
 */
var app = require("../app");
var debug = require("debug")("my-express-app:server");
var http = require("http");
const { Server } = require("socket.io");
const Message = require("../models/Message");

/**
 * Get port from environment and store in Express.
 */

var port = normalizePort(process.env.PORT || "1280");
app.set("port", port);

/**
 * Create HTTP server.
 */
var server = http.createServer(app);

/**
 * Integrate Socket.io with the server.
 */
const io = new Server(server, {
  cors: {
    origin: "*", // Allow all origins, adjust in production
    methods: ["GET", "POST"],
  },
});

let agentLocation = null;
let buyerLocation = null;
const users = {};

// Handle WebSocket connections
io.on("connection", (socket) => {
  console.log("New client connected:", socket.id);

  // Handle agent location updates
  socket.on("agentLocation", (location) => {
    agentLocation = location;
    console.log("Agent location updated:", location);

    // Emit the agent's location to all connected clients
    io.emit("agentLocationUpdate", agentLocation);
  });

  // Handle buyer location updates
  socket.on("buyerLocation", (location) => {
    buyerLocation = location;
    console.log("Buyer location updated:", location);

    // Emit the buyer's location to all connected clients
    io.emit("buyerLocationUpdate", buyerLocation);
  });

  // Handle disconnection
  socket.on("disconnect", () => {
    console.log("Client disconnected:", socket.id);
  });

  // Chat Messaging
  console.log("New client connected:", socket.id);

  // Register user with their userId
  socket.on("register", (userId) => {
    users[userId] = socket.id;
    console.log(`User ${userId} registered with socket ${socket.id}`);
  });

  // Handle private messaging
  socket.on(
    "sendPrivateMessage",
    async ({ contractId, messageId, from, to, text, role }) => {
      try {
        const newMessage = new Message({
          contractId,
          messageId,
          from,
          to,
          text,
          role,
          timestamp: Date.now(),
        });

        // Save the message to the database
        await newMessage.save();

        // Emit the message to the recipient
        const toSocketId = users[to];
        if (toSocketId) {
          io.to(toSocketId).emit("receivePrivateMessage", newMessage);
        }

        // Optionally send the message back to the sender (for confirmation)
        socket.emit("receivePrivateMessage", newMessage);
      } catch (error) {
        console.error("Error saving message:", error);
      }
    }
  );

  // Clean up on disconnect
  socket.on("disconnect", () => {
    const disconnectedUser = Object.keys(users).find(
      (key) => users[key] === socket.id
    );
    if (disconnectedUser) {
      delete users[disconnectedUser];
      console.log(`User ${disconnectedUser} disconnected.`);
    }
  });
});

/**
 * Listen on provided port, on all network interfaces.
 */
server.listen(port);
server.on("error", onError);
server.on("listening", onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError(error) {
  if (error.syscall !== "listen") {
    throw error;
  }

  var bind = typeof port === "string" ? "Pipe " + port : "Port " + port;

  // handle specific listen errors with friendly messages
  switch (error.code) {
    case "EACCES":
      console.error(bind + " requires elevated privileges");
      process.exit(1);
      break;
    case "EADDRINUSE":
      console.error(bind + " is already in use");
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === "string" ? "pipe " + addr : "port " + addr.port;
  debug("Listening on " + bind);
  console.log(`Server is listening on ${bind}`);
}
